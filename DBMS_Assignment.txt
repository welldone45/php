----------------: Assignment :----------------

DBMS:- Database Management System :-

	Theory Questions :-

Q.1) What do you understand By Database

	A database is an organized collection of structured information, or data, typically stored electronically in a computer system.
	A database is usually controlled by a database management system (DBMS).


Q.2) What is Normalization?

	Normalization is the process of minimizing redundancy from a relation or set of relations. Redundancy in relation may cause insertion,
	deletion, and update anomalies. So, it helps to minimize the redundancy in relations.


Q.3) What is Difference between DBMS and RDBMS?

     There are few important differences between DBMS and RDBMS :-
	
	1.) DBMS stands for Database Management System while RDBMS stands for Relational Database Management System.
	2.) In DBMS Data is stored as file whle in RDBMS Data is stored as tables.
	3.) There is no relationship between data in DBMS while In RDBMS, multiple data elements can be accessed at same time.
	4.) DBMS deals with small quantity of data while RDBMS deals with large quantity of data.
	5.) DBMS supports single user at a time while RDBMS supports multiple users at a time.
	6.) Data Redundancy is common in DBMS while Data Redundancy can be reduced using key and indexes in RDBMS.


Q.4) What is MF Cod Rule of RDBMS Systems?

	Codd's rule in DBMS also known as Codd's 12 rules/commandments is a set of thirteen rules (numbered 0 to 12) that define a database to be a correct
	Relational Database Management System (RDBMS). If a database follows Codd's 12 rules, it is called a True relational database management system.


Q.5) What do you understand By Data Redundancy?

	Data redundancy is when multiple copies of the same information are stored in more than one place at a time.
	This challenge plagues organizations of all sizes in all industries and leads to elevated storage costs, errors, and compromised analytics.


Q.6) What is DDL Interpreter?

	It interprets the DDL (Data Definition Language) Instructions and stores the record in a data dictionary.


Q.7) What is DML Compiler in SQL?

	A DML (data manipulation language) refers to a computer programming language that allows you to add (insert),
	delete (delete), and alter (update) data in a database. A DML is typically a sublanguage of a larger database language.


Q.8) What is SQL Key Constraints writing an Example of SQL Key Constraints?

	In a database table, we can add rules to a column known as constraints. These rules control the data that can be stored in a column.
	For example, if a column has NOT NULL constraint, it means the column cannot store NULL values.


Q.9) What is save Point? How to create a save Point write a Query?

	A SAVEPOINT is a point in a transaction in which you can roll the transaction back to a certain point without rolling back the entire transaction.


Q.10) What is trigger and how to create a Trigger in SQL?
      A trigger is a stored procedure in a database that automatically invokes whenever a special event in the database.
	1) Triggers cannot be manually invoked or executed.
	2) There is no chance that triggers will receive parameters.
	3) A transaction cannot be committed or rolled back inside a trigger.

Creating a Trigger :-

CREATE DATABASE trigger_db

CREATE TABLE candidates
(
    c_id int,
    c_name varchar(40)   
)

INSERT INTO candidates(c_id,c_name) VALUES(1,"Manav")

CREATE TABLE test
(
    id int,
    name varchar(40),
    date_time timestamp,
    action_performed varchar(40)   
)

Insert Trigger:-

DELIMITER $$

CREATE TRIGGER insert_trigger AFTER INSERT ON candidates FOR EACH ROW
BEGIN

INSERT INTO test(id,name,action_performed) VALUES(new.c_id,new.c_name,"Record Inserted!");


			---------------: Theory Complete :---------------


Questions and Examples of Assignment :-

Q.1) Create Table Name : Student and Exam and link it with foreign key.

queries:-

CREATE DATABASE school

CREATE TABLE student(
	rollno int PRIMARY KEY AUTO_INCREMENT,
	name varchar(50),
	branch varchar(50)
)

CREATE TABLE exam(
	s_code varchar(30),
	marks int,
	p_code varchar(10),

	roll_fk int,
	FOREIGN KEY(roll_fk) REFERENCES student(rollno)
)

***************************************************************************

Q.2) Create table given below: Employee and Incentive Table

CREATE DATABASE company

CREATE TABLE employee(
    employee_id int PRIMARY KEY,
    first_name varchar(30),
    last_name varchar(30),
    salary int,
    joining_date varchar(30),
    department varchar(30)    
    )


INSERT INTO employee (employee_id, first_name, last_name, salary, joining_date, department) VALUES
(1, 'John', 'Abraham', 100000, '01-JAN-13  12:00:00 AM', 'Banking'),
(2, 'Michael', 'Clarke', 800000, '01-JAN-13  12:00:00 AM', 'Insurance'),
(3, 'Roy', 'Thomas', 700000, '01-FEB-13  12:00:00 AM', 'Banking'),
(4, 'Tom', 'jose', 600000, '01-FEB-13  12:00:00 AM', 'Insurance'),
(5, 'Jerry', 'Pinto', 650000, '01-FEB-13  12:00:00 AM', 'Services'),
(6, 'Philip', 'Mathew', 750000, '01-FEB-13  12:00:00 AM', 'Services');


CREATE TABLE incentive(
    incentive_date varchar(30),
    incentive_amount int,
    employee_ref_id int,
    FOREIGN KEY (employee_ref_id) REFERENCES employee(employees_id)
        
)


INSERT INTO incentive (incentive_date, incentive_amount, employee_ref_id) VALUES
('01-Feb-2013', 5000, 1),
('01-Feb-2013', 3000, 2),
('01-Feb-2013', 4000, 3),
('01-Jan-2013', 4500, 1),
('01-Jan-2013', 3500, 2);


QUERIES :-


1. Get First_Name from employee table using Tom name “Employee Name”.

SELECT first_name AS "Employee Name"
FROM employee
WHERE last_name = 'jose';



2. Get FIRST_NAME, Joining Date, and Salary from employee table.

SELECT first_name, joining_date, salary
FROM employee;



3. Get all employee details from the employee table order by First_Name Ascending and Salary descending?

SELECT *
FROM employee
ORDER BY first_name ASC, salary DESC;


4. Get employee details from employee table whose first name contains ‘J’.

SELECT *
FROM employee
WHERE first_name LIKE '%J%';



5. Get department wise maximum salary from employee table order by

SELECT department, MAX(salary) AS max_salary
FROM employee
GROUP BY department
ORDER BY department;


6. salary ascending

SELECT department, MAX(salary) AS max_salary
FROM employee
GROUP BY department
ORDER BY department, max_salary ASC;


************************************************************


Q.3) Create table given below: Salesperson and Customer.

CREATE TABLE Salesperson (
    S_NO INT PRIMARY KEY,
    S_NAME VARCHAR(255),
    CITY VARCHAR(255),
    COMMISION DECIMAL(4, 2)
);


INSERT INTO Salesperson (S_NO, S_NAME, CITY, COMMISION) VALUES
(1001, 'Peel', 'London',0.12),
(1002, 'Serres', 'San Jose',0.13),
(1004, 'Motika', 'London',0.11),
(1007, 'Rafkin', 'Barcelona',0.15),
(1003, 'Axelrod', 'New York',0.1);


CREATE TABLE Customer (
    C_NO INT PRIMARY KEY,
    C_NAME VARCHAR(255),
    CITY VARCHAR(255),
    RATING INT,
    
    SNO_FK INT,
    FOREIGN KEY (SNO_FK) REFERENCES Salesperson(S_NO)
);

INSERT INTO Customer (C_NO, C_NAME, CITY, RATING, SNO_FK) VALUES
(201, 'Hoffman', 'London', 100, 1001),
(202, 'Giovanne', 'Roe', 200, 1003),
(203, 'Liu', 'San Jose', 300, 1002),
(204, 'Grass', 'Barcelona', 100, 1002),
(206, 'Clemens', 'London', 300, 1007),
(207, 'Pereira', 'Roe', 100, 1004);


	QUERIES :-

1. Retrieve the below data from above table

2. All orders for more than $1000.



3. Names and cities of all salespeople in London with commission above 0.12

SELECT S_NAME, CITY
FROM Salesperson
WHERE CITY = 'London' AND COMMISION >= 0.12;



4. All salespeople either in Barcelona or in London

SELECT *
FROM Salesperson
WHERE CITY IN ('Barcelona', 'London');



5. All salespeople with commission between 0.10 and 0.12. (Boundary valuesshould be excluded).

SELECT *
FROM Salesperson
WHERE COMMISION > 0.10 AND COMMISION < 0.12;



6. All customers excluding those with rating <= 100 unless they are located in Rome.

SELECT *
FROM Customer
WHERE RATING > 100 OR (RATING <= 100 AND CITY = 'Rome');


*******************************************************************************


Q.4) Write a SQL statement that displays all the information about all salespeople.

CREATE TABLE salespeople (
    salesman_id INT PRIMARY KEY,
    name VARCHAR(255),
    city VARCHAR(255),
    commission DECIMAL(4, 2)
);

INSERT INTO salespeople (salesman_id, name, city, commission) VALUES
(5001, 'James Hoog', 'New York', 0.15),
(5002, 'Nail Knite', 'Paris', 0.13),
(5005, 'Pit Alex', 'London', 0.11),
(5006, 'Mc Lyon', 'Paris', 0.14),
(5007, 'Paul Adam', 'Rome', 0.13),
(5003, 'Lauson Hen', 'San Jose', 0.12);

SELECT * FROM salespeople;


*************************************************************************


Q.5) From the following table, write a SQL query to find orders that are
     delivered by a salesperson with ID. 5001. Return ord_no, ord_date,
     purch_amt. 

CREATE TABLE orders(
    order_no int,
    purchase_amount int,
    order_date int,
    customer_id int,
    salesman_id int
    )


INSERT INTO orders(order_no, purchase_amount, orders_date, customer_id, salesman_id) VALUES(70009,270.65,"2012/09/10",3001,5005);
INSERT INTO orders(order_no, purchase_amount, orders_date, customer_id, salesman_id) VALUES(70002,65.26,"2012/10/05",3002,5001);
INSERT INTO orders(order_no, purchase_amount, orders_date, customer_id, salesman_id) VALUES(70004,110.5,"2012/08/17",3009,5003);
INSERT INTO orders(order_no, purchase_amount, orders_date, customer_id, salesman_id) VALUES(70007,948.5,"2012/9/10",3005,5002);
INSERT INTO orders(order_no, purchase_amount, orders_date, customer_id, salesman_id) VALUES(70005,2400.6,"2012/07/27",3007,5001);
INSERT INTO orders(order_no, purchase_amount, orders_date, customer_id, salesman_id) VALUES(70008,5760,"2012/09/10",3002,5001);
INSERT INTO orders(order_no, purchase_amount, orders_date, customer_id, salesman_id) VALUES(70010,1983.43,"2012/10/10",3004,5006);
INSERT INTO orders(order_no, purchase_amount, orders_date, customer_id, salesman_id) VALUES(70003,2480.4,"2012/10/10",3009,5003);
INSERT INTO orders(order_no, purchase_amount, orders_date, customer_id, salesman_id) VALUES(70012,250.45,"2012/06/27",3008,5002);
INSERT INTO orders(order_no, purchase_amount, orders_date, customer_id, salesman_id) VALUES(70011,75.29,"2012/08/17",3003,5007);
INSERT INTO orders(order_no, purchase_amount, orders_date, customer_id, salesman_id) VALUES(70013,3045.6,"2012/04/25",3002,5001);


SELECT * FROM orders WHERE salesman_id=5001

***********************************************************************************



Q.6) From the following table, write a SQL query to select a range of
     products whose price is in the range Rs.200 to Rs.600. Begin and end
     values are included. Return pro_id, pro_name, pro_price, and pro_com.

CREATE TABLE product (
    PRO_ID INT PRIMARY KEY,
    PRO_NAME VARCHAR(255),
    PRO_PRICE DECIMAL(10, 2),
    PRO_COM INT
);


INSERT INTO product (PRO_ID, PRO_NAME, PRO_PRICE, PRO_COM) VALUES
(101, 'Mother Board', 3200.00, 15),
(102, 'Key Board', 450.00, 16),
(103, 'ZIP drive', 250.00, 14),
(104, 'Speaker', 550.00, 16),
(105, 'Monitor', 5000.00, 11),
(106, 'DVD drive', 900.00, 12),
(107, 'CD drive', 800.00, 12),
(108, 'Printer', 2600.00, 13),
(109, 'Refill cartridge', 350.00, 13),
(110, 'Mouse', 250.00, 12);


SELECT PRO_ID, PRO_NAME, PRO_PRICE, PRO_COM
FROM product
WHERE PRO_PRICE BETWEEN 200.00 AND 600.00;


1. write a SQL query to calculate the average price for a manufacturer code of 16. Return avg. 

SELECT AVG(PRO_PRICE) AS avg_price FROM product WHERE PRO_COM = 16;



2. write a SQL query to display the pro_name as 'Item Name' and pro_priceas 'Price in Rs.

SELECT
    PRO_NAME AS 'Item Name',
    PRO_PRICE AS 'Price in Rs.'
FROM
    product;


3. write a SQL query to find the items whose prices are higher than or equal to $250. Order the result by product price in descending,
   then product name in ascending. Return pro_name and pro_price.

SELECT PRO_NAME, PRO_PRICE
FROM product
WHERE PRO_PRICE >= 250.00
ORDER BY PRO_PRICE DESC, PRO_NAME ASC;



4. write a SQL query to calculate average price of the items for each company. 
Return average price and company code.

SELECT PRO_COM AS company_code, AVG(PRO_PRICE) AS avg_price
FROM product
GROUP BY PRO_COM;


*************************************************************************************

	---------------: DBMS Assignment Complete :---------------

